program     -> declaration* EOF;
declaration -> classDecl | varDecl | funDecl | statement;
classDecl   -> "class" IDENTIFIER "{" function* "}";
varDecl     -> "var" IDENTIFIER ("=" expression)? ";";
funcDecl    -> "fun" function;
statement   -> exprStmt | ifStmt | whileStmt | forStmt | printStmt | block | returnStmt | breakStmt;
exprStmt    -> expression ";";
function    -> IDENTIFIER anFunction;
ifStmt      -> "if" "("expression")" statement ("else" statement)?;
whileStmt   -> "while" "(" expression ")" statement;
forStmt     -> "for" "(" (varDecl | exprStmt | ";") ";" expression? ";" expression? ")" statement;
printStmt   -> "print" expression ";";
block       -> "{" declaration* "}";
returnStmt  -> "return" expression? ";";
breakStmt   -> "break";

anFunction    -> "(" parameters ")" block;
expression  -> assignment ("," assignment)*;
assignment  -> IDENTIFIER "=" assignment | ternary;
parameters  -> IDENTIFIER ("," IDENTIFIER)*;
ternary     -> logicOr ("?" expression ":" expression)*;
logicOr     -> logicAnd ("||" logicAnd)*;
logicAnd    -> equality ("&&" equality)*;
equality    -> comparison (("==" | "!=") comparison)*;
comparison  -> term (("<" | "=<" | ">" | "=>") term)*;
term        -> factor (("+" | "-") factor)*;
factor      -> unary (("*" | "/") unary)*;
unary       -> ("-" | "!") unary | primary;
call        -> primary ("(" arguments? ")")*;
primary     -> STRING | NUMBER | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER;
arguments   -> expression ("," expression)*;