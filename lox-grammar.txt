program     -> declaration* EOF;

******* Statements *******

declaration -> classDecl | varDecl | funDecl | statement;
classDecl   -> "class" IDENTIFIER ("<" IDENTIFIER)? "{" ((IDENTIFIER function) | ("class" IDENTIFIER function))* "}";
varDecl     -> "var" IDENTIFIER ("=" expression)? ";";
funcDecl    -> "fun" IDENTIFIER function;
statement   -> exprStmt | ifStmt | whileStmt | forStmt | printStmt | block | returnStmt | breakStmt;
exprStmt    -> expression ";";
ifStmt      -> "if" "("expression")" statement ("else" statement)?;
whileStmt   -> "while" "(" expression ")" statement;
forStmt     -> "for" "(" (varDecl | exprStmt | ";") ";" expression? ";" expression? ")" statement;
printStmt   -> "print" expression ";";
block       -> "{" declaration* "}";
returnStmt  -> "return" expression? ";";
breakStmt   -> "break";

******* Expressions *******

anFunction   -> "fun" function;
expression  -> assignment ("," assignment)*;
assignment  -> (call ".")? IDENTIFIER "=" assignment | ternary;
ternary     -> logicOr ("?" expression ":" expression)*;
logicOr     -> logicAnd ("||" logicAnd)*;
logicAnd    -> equality ("&&" equality)*;
equality    -> comparison (("==" | "!=") comparison)*;
comparison  -> term (("<" | "=<" | ">" | "=>") term)*;
term        -> factor (("+" | "-") factor)*;
factor      -> unary (("*" | "/" | "%") unary)*;
unary       -> ("-" | "!") unary | primary;
call        -> primary ("(" arguments? ")" | "." IDENTIFIER)*;
primary     -> STRING | NUMBER | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER | "super" "." IDENTIFIER;

******* Lexical grammar *******

NUMBER      -> DIGIT+ ( "." DIGIT+ )? ;
STRING      -> "\"" <any char except "\"">* "\"" ;
IDENTIFIER  -> ALPHA ( ALPHA | DIGIT )* ;
ALPHA       -> "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT       -> "0" ... "9" ;

******* Utility rules *******

function    -> "(" parameters ")" block;
arguments   -> expression ("," expression)*;
parameters  -> IDENTIFIER ("," IDENTIFIER)*;
